package iterator

import (
	"github.com/tdakkota/algo2/alg"
)

type Iterator[T any] interface {
	Iterate(fn func(T) bool)
}

type IteratorFunc[T any] func(fn func(T) bool)

func (f IteratorFunc[T]) Iterate(fn func(T) bool) {
	f(fn)
}

func KeyIterator[L, R any](i Iterator[alg.Pair[L, R]]) Iterator[L] {
	return IteratorFunc[L](func(cb func(L) bool) {
		i.Iterate(func(p alg.Pair[L, R]) bool {
			return cb(p.L)
		})
	})
}

func ValueIterator[L, R any](i Iterator[alg.Pair[L, R]]) Iterator[R] {
	return IteratorFunc[R](func(cb func(R) bool) {
		i.Iterate(func(p alg.Pair[L, R]) bool {
			return cb(p.R)
		})
	})
}

type empty[T any] struct{}

func (e empty[T]) Iterate(func(T) bool) {
}

func Empty[T any]() Iterator[T] {
	return empty[T]{}
}

type OrderedIterator[T any] interface {
	Iterator[T]
	IterateInOrder(fn func(T) bool)
}
